from flask import Flask, render_template, request, redirect, jsonify, url_for
from flask import flash
from flask import session as login_session
from flask import make_response

from flask_httpauth import HTTPBasicAuth

from sqlalchemy import create_engine, asc, desc
from sqlalchemy.orm import sessionmaker, scoped_session

from models import Base, Category, Item, User
from oauth2client.client import flow_from_clientsecrets
from oauth2client.client import FlowExchangeError

import os
import random
import string
import httplib2
import json
import requests
import datetime

auth = HTTPBasicAuth()
app = Flask(__name__)

# Added line per recommendation from Udacity mentor Akshay
PROJECT_ROOT = os.path.dirname(os.path.realpath(__file__))

#CLIENT_ID = json.loads(open(os.path.join(PROJECT_ROOT, 'clientSecrets2.json'),
#                            'r').read())['web']['client_id']
CLIENT_ID = json.loads(open('/var/www/apps/ItemCatalog/client_secrets.json',
                             'r').read())['web']['client_id']

APPLICATION_NAME = "Item Catalog"


# Connect to Database and create database session
# Engine Creation Statements suggested by Udacity mentor Akshay
db_path = os.path.join(os.path.dirname(__file__), 'catalog.db')
db_uri = 'sqlite:///{}'.format(db_path)
engine = create_engine(db_uri)
Base.metadata.bind = engine

DBSession = sessionmaker(bind=engine)
# without the scoped session, the session is set to DBSession()
# for the scoped session, just create the reference.
session = scoped_session(DBSession)


# JSON API for category list
@app.route('/catalog/category/JSON')
def showCategoriesJSON():
    # pull all categories in the table.
    categories = session.query(Category).order_by(asc(Category.name)).all()
    return jsonify(Category=[i.serialize for i in categories])


# JSON API for item list of specific category
@app.route('/catalog/<categoryName>/Items/JSON')
def showItemsInCategoryJSON(categoryName):
    try:
        category = session.query(Category).filter_by(name=categoryName).one()
    except:
        showMessage = "Category '%s' does not exist!" % categoryName
        response = make_response(json.dumps(showMessage), 401)
        response.headers['Content-Type'] = 'application/json'
        return response
    items = session.query(Item).filter_by(
            category_id=category.id).order_by(Item.name).all()
    numberOfItems = len(items)
    return jsonify(Item=[i.serialize for i in items])


@app.route('/')
@app.route('/catalog')
def showCategories():
    # pull all categories in the table.
    categories = session.query(Category).order_by(asc(Category.name)).all()
    items = session.query(Item).order_by(desc(Item.addDate)).limit(6)
    # display them using the template.
    return render_template('categoriesAndLatestItem.html',
                           categories=categories,
                           session=login_session, items=items)


@app.route('/')
@app.route('/catalog/<message>')
def showCategoriesPlus(message):
    # pull all categories in the table.
    categories = session.query(Category).order_by(asc(Category.name)).all()
    items = session.query(Item).order_by(desc(Item.addDate)).limit(6)
    # display them using the template.
    return render_template('categoriesAndLatestItem.html',
                           categories=categories, session=login_session,
                           items=items, message=message)


@app.route('/catalog/newCategory', methods=['GET', 'POST'])
def addNewCategory():
    if 'email' not in login_session:
        return redirect('/login')
    if request.method == 'POST':
        # ensure that the database key value, category.name has been
        # specified before adding it to the table.
        if len(request.form['name']) < 1:
            showMessage = 'Category not added:  name not specified.'
            return redirect(url_for('showCategoriesPlus',
                                    message=showMessage))
        try:
            category = session.query(Category).filter_by(
                        name=request.form['name']).one()
            showMessage = 'Category not added: '
            showMessage += '"%s" already exists!' % request.form['name']
            return redirect(url_for('showCategoriesPlus',
                            message=showMessage))
        except:
            newCategory = Category(name=request.form['name'],
                                   ownerEmail=login_session['email'])
            session.add(newCategory)
            session.commit()
            return redirect(url_for('showCategories'))
    else:
        return render_template('newCategory.html')


@app.route('/catalog/<categoryName>/DeleteCategory', methods=['POST'])
def deleteCategory(categoryName):
    if 'email' not in login_session:
        return redirect('/login')
    category = session.query(Category).filter_by(name=categoryName).one()
    if login_session['email'] != category.ownerEmail:
        return redirect(url_for('showCategories'))
    deleteItems = session.query(Item).filter_by(
                    category_id=category.id).all()
    for item in deleteItems:
        session.delete(item)
        session.commit()
    session.delete(category)
    session.commit()
    return redirect(url_for('showCategories'))


@app.route('/catalog/<category>/Items')
def showItemsInCategory(category):
    try:
        category = session.query(Category).filter_by(name=category).one()
        items = session.query(Item).filter_by(
                    category_id=category.id).order_by(Item.name).all()
        return render_template('itemsInCategory.html',
                               category=category, items=items,
                               itemCount=len(items))
    except:
        showMessage = 'Category "%s" does not exist!' % category
        return redirect(url_for('showCategoriesPlus', message=showMessage))


@app.route('/catalog/<categoryName>/<itemName>/Description')
def showItemDescription(categoryName, itemName):
    # show the description of the item in the specified category
    category = session.query(Category).filter_by(name=categoryName).one()
    item = session.query(Item).filter_by(category_id=category.id,
                                         name=itemName).one()
    return render_template('itemDescription.html', item=item,
                           session=login_session, category=category)


@app.route('/category/<categoryName>/Items/new', methods=['GET', 'POST'])
def addNewItem(categoryName):
    category = session.query(Category).filter_by(name=categoryName).one()
    items = session.query(Item).filter_by(category_id=category.id).all()
    if 'email' not in login_session:
        return redirect('/login')
    if request.method == 'POST':
        # ensure that the database key value,name has been
        # specified before adding it to the table.
        if len(request.form['name']) < 1:
            return redirect(url_for('showItemsInCategory',
                                    category=category.name))
        try:
            checkItem = session.query(Item).filter_by(
                name=request.form['name'], category_id=category.id).one()
            showMessage = 'Item not added to '
            showMessage = '%s: "%s"' % (categoryName, request.form['name'])
            showMessage += ' already exists!'
            return redirect(url_for('showCategoriesPlus',
                                    message=showMessage))
        except:
            # picture = Column(String)
            # addDate = Column(DateTime())
            newItem = Item(name=request.form['name'],
                           description=request.form['description'],
                           category_id=category.id,
                           addDate=datetime.datetime.now(),
                           ownerEmail=login_session['email'])
            session.add(newItem)
            session.commit()
            return redirect(url_for('showItemsInCategory',
                                    category=category.name))
    else:
        return render_template('newItemInCategory.html',
                               category=category, items=items)


@app.route('/catalog/<categoryName>/<itemName>/UpdateDescription',
           methods=['POST'])
def updateDescription(categoryName, itemName):
    if 'email' not in login_session:
        return redirect('/login')
    category = session.query(Category).filter_by(name=categoryName).one()
    updateItem = session.query(Item).filter_by(category_id=category.id,
                                               name=itemName).one()
    updateItem.description = request.form['itemDesc']
    updateItem.addDate = datetime.datetime.now()
    session.add(updateItem)
    session.commit()
    return redirect(url_for('showItemsInCategory', category=category.name))


@app.route('/catalog/<categoryName>/<itemName>/EditDescription')
def editDescription(categoryName, itemName):
    if 'email' not in login_session:
        return redirect('/login')
    category = session.query(Category).filter_by(name=categoryName).one()
    updateItem = session.query(Item).filter_by(category_id=category.id,
                                               name=itemName).one()
    return render_template('itemDescriptionModify.html', category=category,
                           item=updateItem, session=login_session)
    return render_template('itemDescription.html', item=item,
                           session=login_session, category=category)


@app.route('/catalog/<categoryName>/<itemName>/DeleteItem', methods=['POST'])
def deleteItem(categoryName, itemName):
    category = session.query(Category).filter_by(name=categoryName).one()
    deleteItem = session.query(Item).filter_by(category_id=category.id,
                                               name=itemName).one()
    if 'email' not in login_session:
        return redirect('/login')
    session.delete(deleteItem)
    session.commit()
    return redirect(url_for('showItemsInCategory', category=category.name))


# taken from Udacity exercise material
# Create anti-forgery state token
@app.route('/login')
def showLogin():
    state = ''.join(random.choice(string.ascii_uppercase + string.digits)
                    for x in range(32))
    login_session['state'] = state
    # Include google    --- facebook logins in future release... maybe
    return render_template('login.html', STATE=state)
    # now they say, NOT to do it this way;
    # return render_template('loginLocal.html', STATE=state, message='')


# taken from Udacity exercise material
# User Helper Functions
def createUser(login_session):
    # ensure that the database key value,name has been
    # specified before adding it to the table.
    if len(login_session['username']) < 1:
        return redirect(url_for('showItemsInCategory',
                                category=category.name))

    newUser = User(username=login_session['username'],
                   email=login_session['email'],
                   picture=login_session['picture'])
    session.add(newUser)
    session.commit()
    user = session.query(User).filter_by(email=login_session['email']).one()
    return user.id


def getUserInfo(user_id):
    user = session.query(User).filter_by(id=user_id).one()
    return user


def getUserID(email):
    try:
        user = session.query(User).filter_by(email=email).one()
        return user.id
    except:
        return None


# taken from Udacity exercise material
@auth.verify_password
def verify_password(username, password):
    print("Looking for user %s" % username)
    user = session.query(User).filter_by(username=username).first()
    if not user:
        print("User not found")
        return False
    elif not user.verify_password(password):
        print("Unable to verfy password")
        return False
    else:
        g.user = user
        return True


@app.route('/users', methods=['POST'])
def new_user():
    login_session['email'] = ""
    if request.form['state'] != login_session['state']:
        response = make_response(json.dumps('Invalid state parameter.'), 401)
        response.headers['Content-Type'] = 'application/json'
        return response
    username = request.form['username']
    password = request.form['password']
    email = request.form['email']

    if username is None or password is None or email is None:
        print("missing arguments")
        abort(400)

    if session.query(User).filter_by(email=email).first() is not None:
        print("existing user")
        user = session.query(User).filter_by(username=username).first()
        return jsonify({'message': 'user already exists'}), 200

    user = User(username=username, email=email)
    user.hash_password(password)
    session.add(user)
    session.commit()

    login_session['email'] = email
    login_session['provider'] = "local"
    login_session['username'] = username
    return redirect(url_for('showCategories'))


@app.route('/users/<int:id>')
def get_user(id):
    user = session.query(User).filter_by(id=id).one()
    if not user:
        abort(400)
    return jsonify({'username': user.username})


# modified version of function taken from Udacity exercise material
@app.route('/gconnect', methods=['POST'])
def gconnect():
    # Validate state token
    if request.args.get('state') != login_session['state']:
        response = make_response(json.dumps('Invalid state parameter.'), 401)
        response.headers['Content-Type'] = 'application/json'
        return response
    # Obtain authorization code
    code = request.data

    try:
        # Upgrade the authorization code into a credentials object
        oauth_flow = flow_from_clientsecrets('/var/www/apps/ItemCatalog/client_secrets.json', scope='')
        oauth_flow.redirect_uri = 'postmessage'
        credentials = oauth_flow.step2_exchange(code)
    except FlowExchangeError:
        print(" FLOW EXCHANGE ERROR ")
        response = make_response(
            json.dumps('Failed to upgrade the authorization code.'), 401)
        response.headers['Content-Type'] = 'application/json'
        return response

    # Check that the access token is valid.
    access_token = credentials.access_token
    url = ('https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=%s'
           % waccess_token)
    h = httplib2.Http()
    result = json.loads(h.request(url, 'GET')[1])
    # If there was an error in the access token info, abort.
    if result.get('error') is not None:
        response = make_response(json.dumps(result.get('error')), 500)
        response.headers['Content-Type'] = 'application/json'
        return response

    # Verify that the access token is used for the intended user.
    gplus_id = credentials.id_token['sub']
    if result['user_id'] != gplus_id:
        response = make_response(
            json.dumps("Token's user ID doesn't match given user ID."), 401)
        response.headers['Content-Type'] = 'application/json'
        return response

    # Verify that the access token is valid for this app.
    if result['issued_to'] != CLIENT_ID:
        response = make_response(
            json.dumps("Token's client ID does not match app's."), 401)
        print("Token's client ID does not match app's.")
        response.headers['Content-Type'] = 'application/json'
        return response

    stored_access_token = login_session.get('access_token')
    stored_gplus_id = login_session.get('gplus_id')
    # 12/15/17 I am forcing the values to be reset with each login.
    #          i had a problem while testing, where i could NOT
    #          view the required information
    # if stored_access_token is not None and gplus_id == stored_gplus_id:
    #    jsonMsg = 'Current user is already connected.'
    #    response = make_response(json.dumps(jsonMsg), 200)
    #    response.headers['Content-Type'] = 'application/json'
    #    return response

    # Store the access token in the session for later use.
    login_session['access_token'] = credentials.access_token
    login_session['gplus_id'] = gplus_id

    # Get user info
    userinfo_url = "https://www.googleapis.com/oauth2/v1/userinfo"
    params = {'access_token': credentials.access_token, 'alt': 'json'}
    answer = requests.get(userinfo_url, params=params)

    data = answer.json()

    login_session['username'] = data['name']
    login_session['picture'] = data['picture']
    login_session['email'] = data['email']
    # ADD PROVIDER TO LOGIN SESSION
    login_session['provider'] = 'google'

    # see if user exists, if it doesn't make a new one
    user_id = getUserID(data["email"])
    if not user_id:
        user_id = createUser(login_session)
    login_session['user_id'] = user_id

    output = ''
    output += '<h1>Welcome, '
    output += login_session['username']
    output += '!</h1>'
    output += '<img src="'
    output += login_session['picture']
    output += ' " style = "width: 300px; '
    output += ' height: 300px;border-radius: 150px;'
    output += ' -webkit-border-radius: 150px;-moz-border-radius: 150px;"> '
    flash("you are now logged in as %s" % login_session['username'])
    print("done!")
    return output


# taken from Udacity exercise material
# DISCONNECT - Revoke a current user's token and reset their login_session
@app.route('/gdisconnect')
def gdisconnect():
    # Only disconnect a connected user.
    access_token = login_session.get('access_token')
    if access_token is None:
        response = make_response(
            json.dumps('Current user not connected.'), 401)
        response.headers['Content-Type'] = 'application/json'
        return response
    url = 'https://accounts.google.com/o/oauth2/revoke?token='
    url += '%s' % access_token
    h = httplib2.Http()
    result = h.request(url, 'GET')[0]
    if result['status'] == '200':
        del login_session['access_token']
        del login_session['gplus_id']
        del login_session['username']
        del login_session['email']
        del login_session['picture']
        showMessage = 'Successfully Disconnected.'
        return redirect(url_for('showCategoriesPlus', message=showMessage))
    else:
        del login_session['access_token']
        del login_session['gplus_id']
        del login_session['username']
        del login_session['email']
        del login_session['picture']
        showMessage = 'Failed to revoke token for given user.'
        return redirect(url_for('showCategoriesPlus', message=showMessage))


if __name__ == '__main__':
    app.secret_key = 'super_secret_key'
    app.debug = True
    app.run(host='0.0.0.0', port=8000)
